alpha = 1,
size = 1)+
labs(x = "", y = "") +
theme_minimal()
ggmap(mad_map)+
geom_sf(data = q$osm_points,
inherit.aes = FALSE,
colour = "black",
#fill = "#004529",
alpha = 1,
size = 1)+
labs(x = "", y = "") +
theme_minimal()
osm_points$ele
q$osm_points$ele
q <- opq(bbox = c(-78.6035, 38.3309, -78.1329, 38.9380)) %>%
add_osm_feature(key = 'highway', value = 'footway') %>%
add_osm_feature(key = 'highway', value = 'path') %>%
add_osm_feature(key = 'ele')
q <- opq(bbox = c(-78.6035, 38.3309, -78.1329, 38.9380)) %>%
add_osm_feature(key = 'highway', value = 'footway') %>%
add_osm_feature(key = 'highway', value = 'path') %>%
add_osm_feature(key = 'ele') %>%
osmdata_sf ()
myLocation <- c(-78.6035, 38.3309, -78.1329, 38.9380)
mad_map <- get_map(location=myLocation, source='stamen', maptype = 'toner-2011')
mad_map <- get_map(location=myLocation, source='stamen', maptype = 'toner-2011')
ggmap(mad_map)+
geom_sf(data = q$osm_points,
inherit.aes = FALSE,
colour = "black",
#fill = "#004529",
alpha = 1,
size = 1)+
labs(x = "", y = "") +
theme_minimal()
q <- opq(bbox = c(-78.6035, 38.3309, -78.1329, 38.9380)) %>%
add_osm_feature(key = 'highway', value = 'footway') %>%
add_osm_feature(key = 'highway', value = 'path') %>%
#add_osm_feature(key = 'ele') %>%
osmdata_sf ()
#fway_shen <- osmdata_sp(q)
#sp::plot(fway_shen$osm_lines)
myLocation <- c(-78.6035, 38.3309, -78.1329, 38.9380)
mad_map <- get_map(location=myLocation, source='stamen', maptype = 'toner-2011')
ggmap(mad_map)+
geom_sf(data = q$osm_points,
inherit.aes = FALSE,
colour = "black",
#fill = "#004529",
alpha = 1,
size = 1)+
labs(x = "", y = "") +
theme_minimal()
q <- opq(bbox = c(-78.6035, 38.3309, -78.1329, 38.9380)) %>%
add_osm_feature(key= 'natural', value='peak') %>%
add_osm_feature(key = 'highway', value = 'footway') %>%
add_osm_feature(key = 'highway', value = 'path') %>%
#add_osm_feature(key = 'ele') %>%
osmdata_sf ()
myLocation <- c(-78.6035, 38.3309, -78.1329, 38.9380)
mad_map <- get_map(location=myLocation, source='stamen', maptype = 'toner-2011')
ggmap(mad_map)+
geom_sf(data = q$osm_points,
inherit.aes = FALSE,
colour = "black",
#fill = "#004529",
alpha = 1,
size = 1)+
labs(x = "", y = "") +
theme_minimal()
q <- opq(bbox = c(-78.6035, 38.3309, -78.1329, 38.9380)) %>%
add_osm_feature(key = 'highway', value = 'footway') %>%
add_osm_feature(key = 'highway', value = 'path') %>%
#add_osm_feature(key = 'ele') %>%
osmdata_sf ()
myLocation <- c(-78.6035, 38.3309, -78.1329, 38.9380)
mad_map <- get_map(location=myLocation, source='stamen', maptype = 'toner-2011')
ggmap(mad_map)+
geom_sf(data = q$osm_points,
inherit.aes = FALSE,
colour = "black",
#fill = "#004529",
alpha = 1,
size = 1)+
labs(x = "", y = "") +
theme_minimal()
q <- opq(bbox = c(-78.6035, 38.3309, -78.1329, 38.9380)) %>%
add_osm_feature(key = 'highway', value = 'footway') %>%
#add_osm_feature(key = 'highway', value = 'path') %>%
#add_osm_feature(key = 'ele') %>%
osmdata_sf ()
myLocation <- c(-78.6035, 38.3309, -78.1329, 38.9380)
mad_map <- get_map(location=myLocation, source='stamen', maptype = 'toner-2011')
mad_map <- get_map(location=myLocation, source='stamen', maptype = 'toner-2011')
ggmap(mad_map)+
geom_sf(data = q$osm_points,
inherit.aes = FALSE,
colour = "black",
#fill = "#004529",
alpha = 1,
size = 1)+
labs(x = "", y = "") +
theme_minimal()
mad_map <- get_map(location=myLocation, source='stamen', maptype = 'satellite')
mad_map <- get_map(location=myLocation,  maptype = 'satellite')
mad_map <- get_map(location=myLocation,  maptype = 'terrain')
mad_map <- get_map(location=myLocation, source='stamen', maptype = 'terrain')
ggmap(mad_map)+
geom_sf(data = q$osm_points,
inherit.aes = FALSE,
colour = "black",
#fill = "#004529",
alpha = 1,
size = 1)+
labs(x = "", y = "") +
theme_minimal()
mad_map <- get_map(location=myLocation, source='stamen', maptype = 'terrain', color=c('color'))
ggmap(mad_map)+
geom_sf(data = q$osm_points,
inherit.aes = FALSE,
colour = "black",
#fill = "#004529",
alpha = 1,
size = 1)+
labs(x = "", y = "") +
theme_minimal()
mad_map <- get_map(location=myLocation, source='stamen', maptype = 'terrain', color=c('green'))
mad_map <- get_map(location=myLocation, source='stamen', maptype = 'terrain', color=c('bw'))
mad_map <- get_map(location=myLocation, source='stamen', maptype = 'terrain', color=c('bw'))
ggmap(mad_map)+
geom_sf(data = q$osm_points,
inherit.aes = FALSE,
colour = "black",
#fill = "#004529",
alpha = 1,
size = 1)+
labs(x = "", y = "") +
theme_minimal()
mad_map <- get_map(location=myLocation, source='stamen', maptype = 'terrain-lines')
mad_map <- get_map(location=myLocation, source='stamen', maptype = 'terrain-lines')
ggmap(mad_map)+
geom_sf(data = q$osm_points,
inherit.aes = FALSE,
colour = "black",
#fill = "#004529",
alpha = 1,
size = 1)+
labs(x = "", y = "") +
theme_minimal()
mad_map <- get_map(location=myLocation, source='stamen', maptype = 'terrain-background')
mad_map <- get_map(location=myLocation, source='stamen', maptype = 'terrain-background')
ggmap(mad_map)+
geom_sf(data = q$osm_points,
inherit.aes = FALSE,
colour = "black",
#fill = "#004529",
alpha = 1,
size = 1)+
labs(x = "", y = "") +
theme_minimal()
ggsave('test5.tiff')
ggmap(mad_map)+
geom_sf(data = q$osm_lines,
inherit.aes = FALSE,
colour = "black",
#fill = "#004529",
alpha = 1,
size = 1)+
labs(x = "", y = "") +
theme_minimal()
install.package('elevatr')
install.packages('elevatr')
library(tidyverse)
library(sf)
library(ggplot2)
# read in base shapefile containing all census divisions
canada_base <- read_sf("data/lcd_000b16a_e.shp")
# now, get the centroid for each polygon
# we need this so we can provide the long/lat location for the population data
sf_cent <- st_centroid(canada_base)
# if you need to plot to double check!: just overlay the geom_sf(canada_base) and sf_cent
# there is some weirdness on the coasts because islands, but it's minor so i'll just ignore it
# read in the census data with division names and population renting/owning
canada_pop_all <- read.table("data/canada_population_2016_census.csv", header=T, sep=",", fill=T)
canada_pop <- read.csv("data/canada_dwelling_cond.csv")
# add lon and lat from the calculated centroids
sf_cent$lonlat <- stringr::str_remove_all(sf_cent$geometry, "[c()]")
# this throws a warning but it works
# split into lon and lat columns
sf_cent <- sf_cent %>% separate(lonlat, c("lon","lat"), sep = "(,)")
sf_cent$lon <- as.numeric(paste0(sf_cent$lon))
sf_cent$lat <- as.numeric(paste0(sf_cent$lat))
# now, append population to the extracted lon/lat coordinates so we can visualize
sf_cent$population <- canada_pop$Housing.Tenure...Owner....distribution.2016.[match(sf_cent$CDUID,canada_pop$ï..Geographic.code)]
sf_cent$population_density <- canada_pop_all$Population.density.per.square.kilometre..2016[match(sf_cent$CDUID,canada_pop_all$Geographic.code)]
#sf_cent$population <- as.numeric(as.character(sf_cent$population))
ggplot()+
geom_sf(data = canada_base$geometry, fill='black', color='grey36', size=.1) +
geom_point(data = sf_cent, aes(x = lon, y = lat, size=population_density, color=population), alpha=.9) +
scale_color_gradientn(colors = c('lightgoldenrod1','turquoise4')) +
scale_radius(range=c(3, 18)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(), legend.position="bottom",
legend.key.height = unit(.15, 'cm'),
legend.key.width = unit(.4, 'cm'),
legend.title=element_text(""),
legend.text=element_text(""),
legend.key = element_rect(fill = "black"),
#plot.margin = unit(c(t=4,r=4,b=4,l=4), "cm"),
plot.background=element_rect(fill = 'black', color=NA),
panel.background = element_rect(fill = 'black', color=NA))+
guides(shape=FALSE)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(tidyverse)
library(sf)
library(ggplot2)
# read in base shapefile containing all census divisions
canada_base <- read_sf("data/lcd_000b16a_e.shp")
# now, get the centroid for each polygon
# we need this so we can provide the long/lat location for the population data
sf_cent <- st_centroid(canada_base)
# if you need to plot to double check!: just overlay the geom_sf(canada_base) and sf_cent
# there is some weirdness on the coasts because islands, but it's minor so i'll just ignore it
# read in the census data with division names and population renting/owning
canada_pop_all <- read.table("data/canada_population_2016_census.csv", header=T, sep=",", fill=T)
canada_pop <- read.csv("data/canada_dwelling_cond.csv")
# add lon and lat from the calculated centroids
sf_cent$lonlat <- stringr::str_remove_all(sf_cent$geometry, "[c()]")
# this throws a warning but it works
# split into lon and lat columns
sf_cent <- sf_cent %>% separate(lonlat, c("lon","lat"), sep = "(,)")
sf_cent$lon <- as.numeric(paste0(sf_cent$lon))
sf_cent$lat <- as.numeric(paste0(sf_cent$lat))
View(canada_pop)
# add lon and lat from the calculated centroids
sf_cent$lonlat <- stringr::str_remove_all(sf_cent$geometry, "[c()]")
# this throws a warning but it works
# split into lon and lat columns
sf_cent <- sf_cent %>% separate(lonlat, c("lon","lat"), sep = "(,)")
sf_cent$lon <- as.numeric(paste0(sf_cent$lon))
sf_cent$lat <- as.numeric(paste0(sf_cent$lat))
# now, append population to the extracted lon/lat coordinates so we can visualize
sf_cent$population <- canada_pop$Housing.Tenure...Owner....distribution.2016.[match(sf_cent$CDUID,canada_pop$ï..Geographic.code)]
sf_cent$population_density <- canada_pop_all$Population.density.per.square.kilometre..2016[match(sf_cent$CDUID,canada_pop_all$Geographic.code)]
#sf_cent$population <- as.numeric(as.character(sf_cent$population))
ggplot()+
geom_sf(data = canada_base$geometry, fill='black', color='grey36', size=.1) +
geom_point(data = sf_cent, aes(x = lon, y = lat, size=population_density, color=population), alpha=.9) +
scale_color_gradientn(colors = c('lightgoldenrod1','turquoise4')) +
scale_radius(range=c(3, 18)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(), legend.position="bottom",
legend.key.height = unit(.15, 'cm'),
legend.key.width = unit(.4, 'cm'),
legend.title=element_text(""),
legend.text=element_text(""),
legend.key = element_rect(fill = "black"),
#plot.margin = unit(c(t=4,r=4,b=4,l=4), "cm"),
plot.background=element_rect(fill = 'black', color=NA),
panel.background = element_rect(fill = 'black', color=NA))+
guides(shape=FALSE)
ggplot()+
geom_sf(data = canada_base$geometry, fill='black', color='grey36', size=.1) +
geom_point(data = sf_cent, aes(x = lon, y = lat, size=population_density, color=population), alpha=.9) +
scale_color_gradientn(colors = c('lightgoldenrod1','turquoise4')) +
scale_radius(range=c(3, 18)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(), legend.position="bottom",
legend.key.height = unit(.15, 'cm'),
legend.key.width = unit(.4, 'cm'),
legend.title=element_text(""),
legend.text=element_text(""),
legend.key = element_rect(fill = "black"),
#plot.margin = unit(c(t=4,r=4,b=4,l=4), "cm"),
plot.background=element_rect(fill = 'black', color=NA),
panel.background = element_rect(fill = 'black', color=NA))+
guides(size=FALSE)
ggplot()+
geom_sf(data = canada_base$geometry, fill='black', color='grey36', size=.1) +
geom_point(data = sf_cent, aes(x = lon, y = lat, size=population_density, color=population), alpha=.9) +
scale_color_gradientn(colors = c('lightgoldenrod1','turquoise4')) +
scale_radius(range=c(3, 18)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(), legend.position="bottom",
legend.key.height = unit(.15, 'cm'),
legend.key.width = unit(.4, 'cm'),
legend.title=element_blank(),
legend.key = element_rect(fill = "black"),
#plot.margin = unit(c(t=4,r=4,b=4,l=4), "cm"),
plot.background=element_rect(fill = 'black', color=NA),
panel.background = element_rect(fill = 'black', color=NA))+
guides(size=FALSE)
ggplot()+
geom_sf(data = canada_base$geometry, fill='black', color='grey36', size=.1) +
geom_point(data = sf_cent, aes(x = lon, y = lat, size=population_density, color=population), alpha=.9) +
scale_color_gradientn(colors = c('lightgoldenrod1','turquoise4')) +
scale_radius(range=c(3, 18)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(), legend.position="bottom",
legend.key.height = unit(.15, 'cm'),
legend.key.width = unit(.4, 'cm'),
legend.title=element_blank(),
legend.text=element_text(""),
legend.key = element_rect(fill = "black"),
#plot.margin = unit(c(t=4,r=4,b=4,l=4), "cm"),
plot.background=element_rect(fill = 'black', color=NA),
panel.background = element_rect(fill = 'black', color=NA))+
guides(size=FALSE)
library(tidyverse)
library(sf)
library(ggplot2)
# read in base shapefile containing all census divisions
canada_base <- read_sf("data/lcd_000b16a_e.shp")
# now, get the centroid for each polygon
# we need this so we can provide the long/lat location for the population data
sf_cent <- st_centroid(canada_base)
# if you need to plot to double check!: just overlay the geom_sf(canada_base) and sf_cent
# there is some weirdness on the coasts because islands, but it's minor so i'll just ignore it
# read in the census data with division names and population renting/owning
canada_pop_all <- read.table("data/canada_population_2016_census.csv", header=T, sep=",", fill=T)
canada_pop <- read.csv("data/canada_dwelling_cond.csv")
# add lon and lat from the calculated centroids
sf_cent$lonlat <- stringr::str_remove_all(sf_cent$geometry, "[c()]")
# this throws a warning but it works
# split into lon and lat columns
sf_cent <- sf_cent %>% separate(lonlat, c("lon","lat"), sep = "(,)")
sf_cent$lon <- as.numeric(paste0(sf_cent$lon))
sf_cent$lat <- as.numeric(paste0(sf_cent$lat))
# now, append population to the extracted lon/lat coordinates so we can visualize
sf_cent$population <- canada_pop$Housing.Tenure...Owner....distribution.2016.[match(sf_cent$CDUID,canada_pop$ï..Geographic.code)]
sf_cent$population_density <- canada_pop_all$Population.density.per.square.kilometre..2016[match(sf_cent$CDUID,canada_pop_all$Geographic.code)]
#sf_cent$population <- as.numeric(as.character(sf_cent$population))
ggplot()+
geom_sf(data = canada_base$geometry, fill='black', color='grey36', size=.1) +
geom_point(data = sf_cent, aes(x = lon, y = lat, size=population_density, color=population), alpha=.9) +
scale_color_gradientn(colors = c('lightgoldenrod1','turquoise4')) +
scale_radius(range=c(3, 18)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(), legend.position="bottom",
legend.key.height = unit(.15, 'cm'),
legend.key.width = unit(.4, 'cm'),
legend.title=element_blank(),
legend.text=element_text(""),
legend.key = element_rect(fill = "black"),
#plot.margin = unit(c(t=4,r=4,b=4,l=4), "cm"),
plot.background=element_rect(fill = 'black', color=NA),
panel.background = element_rect(fill = 'black', color=NA))+
guides(size=FALSE)
ggplot()+
geom_sf(data = canada_base$geometry, fill='black', color='grey36', size=.1) +
geom_point(data = sf_cent, aes(x = lon, y = lat, size=population_density, color=population), alpha=.9) +
scale_color_gradientn(colors = c('lightgoldenrod1','turquoise4')) +
scale_radius(range=c(3, 18)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(), legend.position="bottom",
legend.key.height = unit(.15, 'cm'),
legend.key.width = unit(.4, 'cm'),
legend.title=element_blank(),
legend.text=element_text(""),
legend.key = element_blank(),
#plot.margin = unit(c(t=4,r=4,b=4,l=4), "cm"),
plot.background=element_rect(fill = 'black', color=NA),
panel.background = element_rect(fill = 'black', color=NA))+
guides(size=FALSE)
ggplot()+
geom_sf(data = canada_base$geometry, fill='black', color='grey36', size=.1) +
geom_point(data = sf_cent, aes(x = lon, y = lat, size=population_density, color=population), alpha=.9) +
scale_color_gradientn(colors = c('lightgoldenrod1','turquoise4')) +
scale_radius(range=c(3, 18)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(), legend.position="bottom",
legend.key.height = unit(.15, 'cm'),
legend.key.width = unit(.4, 'cm'),
legend.title=element_blank(),
legend.key = element_blank(),
legend.background=element_blank(),
#plot.margin = unit(c(t=4,r=4,b=4,l=4), "cm"),
plot.background=element_rect(fill = 'black', color=NA),
panel.background = element_rect(fill = 'black', color=NA))+
guides(size=FALSE)
ggplot()+
geom_sf(data = canada_base$geometry, fill='black', color='grey36', size=.1) +
geom_point(data = sf_cent, aes(x = lon, y = lat, size=population_density, color=population), alpha=.9) +
scale_color_gradientn(colors = c('lightgoldenrod1','turquoise4')) +
scale_radius(range=c(3, 18)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(), legend.position="bottom",
legend.key.height = unit(.15, 'cm'),
legend.key.width = unit(.4, 'cm'),
legend.title=element_blank(),
legend.key = element_blank(),
legend.background=element_blank(),
legend.text=element_text(color='white',size=8)
#plot.margin = unit(c(t=4,r=4,b=4,l=4), "cm"),
plot.background=element_rect(fill = 'black', color=NA),
panel.background = element_rect(fill = 'black', color=NA))+
guides(size=FALSE)
ggplot()+
geom_sf(data = canada_base$geometry, fill='black', color='grey36', size=.1) +
geom_point(data = sf_cent, aes(x = lon, y = lat, size=population_density, color=population), alpha=.9) +
scale_color_gradientn(colors = c('lightgoldenrod1','turquoise4')) +
scale_radius(range=c(3, 18)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(), legend.position="bottom",
legend.key.height = unit(.15, 'cm'),
legend.key.width = unit(.4, 'cm'),
legend.title=element_blank(),
legend.key = element_blank(),
legend.background=element_blank(),
legend.text=element_text(color='white',size=8),
#plot.margin = unit(c(t=4,r=4,b=4,l=4), "cm"),
plot.background=element_rect(fill = 'black', color=NA),
panel.background = element_rect(fill = 'black', color=NA))+
guides(size=FALSE)
ggsave('day12.png',width=7,height=7,dpi=400)
ggplot()+
geom_sf(data = canada_base$geometry, fill='black', color='grey36', size=.25) +
geom_point(data = sf_cent, aes(x = lon, y = lat, size=population_density, color=population), alpha=.9) +
scale_color_gradientn(colors = c('lightgoldenrod1','turquoise4')) +
scale_radius(range=c(3, 18)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(), legend.position="bottom",
legend.key.height = unit(.15, 'cm'),
legend.key.width = unit(.4, 'cm'),
legend.title=element_blank(),
legend.key = element_blank(),
legend.background=element_blank(),
legend.text=element_text(color='white',size=8),
#plot.margin = unit(c(t=4,r=4,b=4,l=4), "cm"),
plot.background=element_rect(fill = 'black', color=NA),
panel.background = element_rect(fill = 'black', color=NA))+
guides(size=FALSE)
ggsave('day12.png',width=7,height=7,dpi=400)
ggplot()+
geom_sf(data = canada_base$geometry, fill='black', color='grey36', size=.35) +
geom_point(data = sf_cent, aes(x = lon, y = lat, size=population_density, color=population), alpha=.9) +
scale_color_gradientn(colors = c('lightgoldenrod1','turquoise4')) +
scale_radius(range=c(3, 18)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(), legend.position="bottom",
legend.key.height = unit(.15, 'cm'),
legend.key.width = unit(.4, 'cm'),
legend.title=element_blank(),
legend.key = element_blank(),
legend.background=element_blank(),
legend.text=element_text(color='white',size=8),
#plot.margin = unit(c(t=4,r=4,b=4,l=4), "cm"),
plot.background=element_rect(fill = 'black', color=NA),
panel.background = element_rect(fill = 'black', color=NA))+
guides(size=FALSE)
ggsave('day12.png',width=7,height=7,dpi=400)
